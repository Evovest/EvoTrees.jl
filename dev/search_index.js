var documenterSearchIndex = {"docs":
[{"location":"MLJ/#MLJ-Integration","page":"MLJ","title":"MLJ Integration","text":"","category":"section"},{"location":"MLJ/","page":"MLJ","title":"MLJ","text":"EvoTrees.jl provides a first-class integration with the MLJ ecosystem. ","category":"page"},{"location":"MLJ/","page":"MLJ","title":"MLJ","text":"See official project page for more info.","category":"page"},{"location":"MLJ/","page":"MLJ","title":"MLJ","text":"To use with MLJ, an EvoTrees model must first be initialized using either EvoTreeRegressor, EvoTreeClassifier, EvoTreeCount or EvoTreeGaussian. The model is then passed to MLJ's machine, opening access to the rest of the MLJ modeling ecosystem. ","category":"page"},{"location":"MLJ/","page":"MLJ","title":"MLJ","text":"using StatsBase: sample\nusing EvoTrees\nusing EvoTrees: sigmoid, logit # only needed to create the synthetic data below\nusing MLJBase\n\nfeatures = rand(10_000) .* 5 .- 2\nX = reshape(features, (size(features)[1], 1))\nY = sin.(features) .* 0.5 .+ 0.5\nY = logit(Y) + randn(size(Y))\nY = sigmoid(Y)\ny = Y\nX = MLJBase.table(X)\n\n# linear regression\ntree_model = EvoTreeRegressor(loss=:linear, max_depth=5, Œ∑=0.05, nrounds=10)\n\n# set machine\nmach = machine(tree_model, X, y)\n\n# partition data\ntrain, test = partition(eachindex(y), 0.7, shuffle=true); # 70:30 split\n\n# fit data\nfit!(mach, rows=train, verbosity=1)\n\n# continue training\nmach.model.nrounds += 10\nfit!(mach, rows=train, verbosity=1)\n\n# predict on train data\npred_train = predict(mach, selectrows(X, train))\nmean(abs.(pred_train - selectrows(Y, train)))\n\n# predict on test data\npred_test = predict(mach, selectrows(X, test))\nmean(abs.(pred_test - selectrows(Y, test)))","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"EvoTrees.jl supports four model families:","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"EvoTreeRegressor\nLinear (minimize mean-squared error)\nLogistic (minimize cross-entropy)\nL1: minimize mean-absolute error\nQuantile\nEvoTreeClassifier\nEvoTreeCount\nEvoTreeGaussian","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"EvoTreeRegressor\nsalut","category":"page"},{"location":"models/#EvoTrees.EvoTreeRegressor","page":"Models","title":"EvoTrees.EvoTreeRegressor","text":"EvoTreeRegressor(;\n    T::Type=Float64,\n    loss=:linear,\n    nrounds=10,\n    Œª=0.0,\n    Œ≥=0.0,\n    Œ∑=0.1,\n    max_depth=5,\n    min_weight=1.0,\n    rowsample=1.0,\n    colsample=1.0,\n    nbins=64,\n    Œ±=0.5,\n    metric=:mse,\n    rng=123,\n    device=\"cpu\")\n\nDocs for regressor.\n\n\n\n\n\n","category":"type"},{"location":"models/#EvoTrees.salut","page":"Models","title":"EvoTrees.salut","text":"salut(x)\n\nDoc for salut.\n\n\n\n\n\n","category":"function"},{"location":"models/","page":"Models","title":"Models","text":"EvoTreeCount\nEvoTreeClassifier","category":"page"},{"location":"examples/#Regression","page":"Examples","title":"Regression","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Minimal example to fit a noisy sinus wave.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using EvoTrees\nusing EvoTrees: sigmoid, logit\n\n# prepare a dataset\nfeatures = rand(10000) .* 20 .- 10\nX = reshape(features, (size(features)[1], 1))\nY = sin.(features) .* 0.5 .+ 0.5\nY = logit(Y) + randn(size(Y))\nY = sigmoid(Y)\nùëñ = collect(1:size(X, 1))\n\n# train-eval split\nùëñ_sample = sample(ùëñ, size(ùëñ, 1), replace = false)\ntrain_size = 0.8\nùëñ_train = ùëñ_sample[1:floor(Int, train_size * size(ùëñ, 1))]\nùëñ_eval = ùëñ_sample[floor(Int, train_size * size(ùëñ, 1))+1:end]\n\nX_train, X_eval = X[ùëñ_train, :], X[ùëñ_eval, :]\nY_train, Y_eval = Y[ùëñ_train], Y[ùëñ_eval]\n\nparams1 = EvoTreeRegressor(\n    loss=:linear, metric=:mse,\n    nrounds=100, nbins = 100,\n    Œª = 0.5, Œ≥=0.1, Œ∑=0.1,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0)\nmodel = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)\npred_eval_linear = predict(model, X_eval)\n\n# logistic / cross-entropy\nparams1 = EvoTreeRegressor(\n    loss=:logistic, metric = :logloss,\n    nrounds=100, nbins = 100,\n    Œª = 0.5, Œ≥=0.1, Œ∑=0.1,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0)\nmodel = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)\npred_eval_logistic = predict(model, X_eval)\n\n# Poisson\nparams1 = EvoTreeCount(\n    loss=:poisson, metric = :poisson,\n    nrounds=100, nbins = 100,\n    Œª = 0.5, Œ≥=0.1, Œ∑=0.1,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0)\nmodel = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)\npred_eval_poisson = predict(model, X_eval)\n\n# L1\nparams1 = EvoTreeRegressor(\n    loss=:L1, Œ±=0.5, metric = :mae,\n    nrounds=100, nbins=100,\n    Œª = 0.5, Œ≥=0.0, Œ∑=0.1,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0)\nmodel = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)\npred_eval_L1 = predict(model, X_eval)","category":"page"},{"location":"examples/#Quantile-Regression","page":"Examples","title":"Quantile Regression","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# q50\nparams1 = EvoTreeRegressor(\n    loss=:quantile, Œ±=0.5, metric = :quantile,\n    nrounds=200, nbins = 100,\n    Œª = 0.1, Œ≥=0.0, Œ∑=0.05,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0)\nmodel = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)\npred_train_q50 = predict(model, X_train)\n\n# q20\nparams1 = EvoTreeRegressor(\n    loss=:quantile, Œ±=0.2, metric = :quantile,\n    nrounds=200, nbins = 100,\n    Œª = 0.1, Œ≥=0.0, Œ∑=0.05,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0)\nmodel = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)\npred_train_q20 = predict(model, X_train)\n\n# q80\nparams1 = EvoTreeRegressor(\n    loss=:quantile, Œ±=0.8,\n    nrounds=200, nbins = 100,\n    Œª = 0.1, Œ≥=0.0, Œ∑=0.05,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0)\nmodel = fit_evotree(params1, X_train, Y_train, X_eval = X_eval, Y_eval = Y_eval, print_every_n = 25)\npred_train_q80 = predict(model, X_train)","category":"page"},{"location":"examples/#Gaussian-Max-Likelihood","page":"Examples","title":"Gaussian Max Likelihood","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"params1 = EvoTreeGaussian(\n    loss=:gaussian, metric=:gaussian,\n    nrounds=100, nbins=100,\n    Œª = 0.0, Œ≥=0.0, Œ∑=0.1,\n    max_depth = 6, min_weight = 1.0,\n    rowsample=0.5, colsample=1.0, seed=123)","category":"page"},{"location":"#EvoTress.jl","page":"Introduction","title":"EvoTress.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"fit_evotree\npredict\nimportance","category":"page"},{"location":"#EvoTrees.fit_evotree","page":"Introduction","title":"EvoTrees.fit_evotree","text":"fit_evotree(params, X_train, Y_train, W_train=nothing;\n    X_eval=nothing, Y_eval=nothing, W_eval = nothing,\n    early_stopping_rounds=9999,\n    print_every_n=9999,\n    verbosity=1)\n\nMain training function. Performs model fitting given configuration params, X_train, Y_train input data. \n\nArguments\n\nparams::EvoTypes: configuration info providing hyper-paramters. EvoTypes comprises EvoTreeRegressor, EvoTreeClassifier, EvoTreeCount or EvoTreeGaussian\nX_train::Matrix: training data of size [#observations, #features]. \nY_train::Vector: vector of train targets of length #observations.\nW_train::Vector: vector of train weights of length #observations. Defaults to nothing and a vector of ones is assumed.\n\nKeyword arguments\n\nX_eval::Matrix: evaluation data of size [#observations, #features]. \nY_eval::Vector: vector of evaluation targets of length #observations.\nW_eval::Vector: vector of evaluation weights of length #observations. Defaults to nothing (assumes a vector of 1s).\nearly_stopping_rounds::Integer: number of consecutive rounds without metric improvement after which fitting in stopped. \nprint_every_n: sets at which frequency logging info should be printed. \nverbosity: set to 1 to print logging info during training.\n\n\n\n\n\n","category":"function"},{"location":"#MLJModelInterface.predict","page":"Introduction","title":"MLJModelInterface.predict","text":"predict(loss::L, tree::Tree{T}, X::AbstractMatrix, K)\n\nPrediction from a single tree - assign each observation to its final leaf.\n\n\n\n\n\npredict(model::GBTree{T}, X::AbstractMatrix)\n\nPredictions from an EvoTrees model - sums the predictions from all trees composing the model.\n\n\n\n\n\n","category":"function"},{"location":"#EvoTrees.importance","page":"Introduction","title":"EvoTrees.importance","text":"importance(model::GBTree, vars::AbstractVector)\n\nSorted normalized feature importance based on loss function gain.\n\n\n\n\n\n","category":"function"}]
}
